package it.unisa.casper.analysis.code_smell_detection.similarityComputation;

import java.io.*;
import java.util.*;

public class CosineSimilarity {

    private File stopwordList;

    public double computeSimilarity(String[] pDocumentOne, String[] pDocumentTwo) throws IOException {
        //Project p = ProjectManager.getInstance().getOpenProjects();
        String filename = System.getProperty("user.home") + File.separator + ".casper" + File.separator + "stopwordlist.txt";


        this.stopwordList = new File(filename);

        if (!this.stopwordList.getParentFile().exists()) {
            stopwordList.getParentFile().mkdirs();
        }
        {
            stopwordList.createNewFile();
            PrintWriter pw = new PrintWriter(stopwordList);
            pw.print("if\r\n");
            pw.print("then\r\n");
            pw.print("else\r\n");
            pw.print("do\r\n");
            pw.print("for\r\n");
            pw.print("while\r\n");
            pw.print("try\r\n");
            pw.print("catch\r\n");
            pw.print("switch\r\n");
            pw.print("case\r\n");
            pw.print("default\r\n");
            pw.print("break\r\n");
            pw.print("abstract\r\n");
            pw.print("continue\r\n");
            pw.print("new\r\n");
            pw.print("int\r\n");
            pw.print("double\r\n");
            pw.print("float\r\n");
            pw.print("boolean\r\n");
            pw.print("interface\r\n");
            pw.print("super\r\n");
            pw.print("char\r\n");
            pw.print("extends\r\n");
            pw.print("long\r\n");
            pw.print("assert\r\n");
            pw.print("byte\r\n");
            pw.print("final\r\n");
            pw.print("native\r\n");
            pw.print("synchronized\r\n");
            pw.print("String\r\n");
            pw.print("finally\r\n");
            pw.print("ArrayList\r\n");
            pw.print("this\r\n");
            pw.print("List\r\n");
            pw.print("null\r\n");
            pw.print("throw\r\n");
            pw.print("char\r\n");
            pw.print("implements\r\n");
            pw.print("package\r\n");
            pw.print("throws\r\n");
            pw.print("class\r\n");
            pw.print("private\r\n");
            pw.print("transient\r\n");
            pw.print("const\r\n");
            pw.print("import\r\n");
            pw.print("protected\r\n");
            pw.print("public\r\n");
            pw.print("void\r\n");
            pw.print("static\r\n");
            pw.print("System.out.print\r\n");
            pw.print("return\r\n");
            pw.print("volatile\r\n");
            pw.print("true\r\n");
            pw.print("instanceof\r\n");
            pw.print("short\r\n");
            pw.print("implements\r\n");
            pw.print(".get(\r\n");
            pw.print("false\r\n");
            pw.print("+\r\n");
            pw.print("-\r\n");
            pw.print("*\r\n");
            pw.print("/\r\n");
            pw.print("%\r\n");
            pw.print("your\r\n");
            pw.print("yours\r\n");
            pw.print("yourself\r\n");
            pw.print("yourselves\r\n");
            pw.print("you\r\n");
            pw.print("yond\r\n");
            pw.print("yonder\r\n");
            pw.print("yon\r\n");
            pw.print("ye\r\n");
            pw.print("yet\r\n");
            pw.print("z\r\n");
            pw.print("zillion\r\n");
            pw.print("j\r\n");
            pw.print("u\r\n");
            pw.print("umpteen\r\n");
            pw.print("usually\r\n");
            pw.print("us\r\n");
            pw.print("uponed\r\n");
            pw.print("upons\r\n");
            pw.print("uponing\r\n");
            pw.print("upon\r\n");
            pw.print("ups\r\n");
            pw.print("upping\r\n");
            pw.print("upped\r\n");
            pw.print("up\r\n");
            pw.print("unto\r\n");
            pw.print("until\r\n");
            pw.print("unless\r\n");
            pw.print("unlike\r\n");
            pw.print("unliker\r\n");
            pw.print("unlikest\r\n");
            pw.print("under\r\n");
            pw.print("underneath\r\n");
            pw.print("use\r\n");
            pw.print("used\r\n");
            pw.print("usedest\r\n");
            pw.print("r\r\n");
            pw.print("rath\r\n");
            pw.print("rather\r\n");
            pw.print("rathest\r\n");
            pw.print("rathe\r\n");
            pw.print("re\r\n");
            pw.print("relate\r\n");
            pw.print("related\r\n");
            pw.print("relatively\r\n");
            pw.print("regarding\r\n");
            pw.print("really\r\n");
            pw.print("res\r\n");
            pw.print("respecting\r\n");
            pw.print("respectively\r\n");
            pw.print("q\r\n");
            pw.print("quite\r\n");
            pw.print("que\r\n");
            pw.print("qua\r\n");
            pw.print("n\r\n");
            pw.print("neither\r\n");
            pw.print("neaths\r\n");
            pw.print("neath\r\n");
            pw.print("nethe\r\n");
            pw.print("nethermost\r\n");
            pw.print("necessary\r\n");
            pw.print("necessariest\r\n");
            pw.print("necessarier\r\n");
            pw.print("never\r\n");
            pw.print("nevertheless\r\n");
            pw.print("nigh\r\n");
            pw.print("nighest\r\n");
            pw.print("nigher\r\n");
            pw.print("nine\r\n");
            pw.print("noone\r\n");
            pw.print("nobody\r\n");
            pw.print("nobodies\r\n");
            pw.print("nowhere\r\n");
            pw.print("nowheres\r\n");
            pw.print("no\r\n");
            pw.print("noes\r\n");
            pw.print("nor\r\n");
            pw.print("nos\r\n");
            pw.print("no-one\r\n");
            pw.print("none\r\n");
            pw.print("not\r\n");
            pw.print("notwithstanding\r\n");
            pw.print("nothings\r\n");
            pw.print("nothing\r\n");
            pw.print("nathless\r\n");
            pw.print("natheless\r\n");
            pw.print("t\r\n");
            pw.print("ten\r\n");
            pw.print("tills\r\n");
            pw.print("till\r\n");
            pw.print("tilled\r\n");
            pw.print("tilling\r\n");
            pw.print("to\r\n");
            pw.print("towards\r\n");
            pw.print("toward\r\n");
            pw.print("towardest\r\n");
            pw.print("towarder\r\n");
            pw.print("together\r\n");
            pw.print("too\r\n");
            pw.print("thy\r\n");
            pw.print("thyself\r\n");
            pw.print("thus\r\n");
            pw.print("than\r\n");
            pw.print("that\r\n");
            pw.print("those\r\n");
            pw.print("thou\r\n");
            pw.print("though\r\n");
            pw.print("thous\r\n");
            pw.print("thouses\r\n");
            pw.print("thoroughest\r\n");
            pw.print("thorougher\r\n");
            pw.print("thorough\r\n");
            pw.print("thoroughly\r\n");
            pw.print("thru\r\n");
            pw.print("thruer\r\n");
            pw.print("thruest\r\n");
            pw.print("thro\r\n");
            pw.print("through\r\n");
            pw.print("throughout\r\n");
            pw.print("throughest\r\n");
            pw.print("througher\r\n");
            pw.print("thine\r\n");
            pw.print("this\r\n");
            pw.print("thises\r\n");
            pw.print("they\r\n");
            pw.print("thee\r\n");
            pw.print("the\r\n");
            pw.print("then\r\n");
            pw.print("thence\r\n");
            pw.print("thenest\r\n");
            pw.print("thener\r\n");
            pw.print("them\r\n");
            pw.print("themselves\r\n");
            pw.print("these\r\n");
            pw.print("therer\r\n");
            pw.print("there\r\n");
            pw.print("thereby\r\n");
            pw.print("therest\r\n");
            pw.print("thereafter\r\n");
            pw.print("therein\r\n");
            pw.print("thereupon\r\n");
            pw.print("therefore\r\n");
            pw.print("their\r\n");
            pw.print("theirs\r\n");
            pw.print("thing\r\n");
            pw.print("things\r\n");
            pw.print("three\r\n");
            pw.print("two\r\n");
            pw.print("o\r\n");
            pw.print("oh\r\n");
            pw.print("owt\r\n");
            pw.print("owning\r\n");
            pw.print("owned\r\n");
            pw.print("own\r\n");
            pw.print("owns\r\n");
            pw.print("others\r\n");
            pw.print("other\r\n");
            pw.print("otherwise\r\n");
            pw.print("otherwisest\r\n");
            pw.print("otherwiser\r\n");
            pw.print("of\r\n");
            pw.print("often\r\n");
            pw.print("oftener\r\n");
            pw.print("oftenest\r\n");
            pw.print("off\r\n");
            pw.print("offs\r\n");
            pw.print("offest\r\n");
            pw.print("one\r\n");
            pw.print("ought\r\n");
            pw.print("oughts\r\n");
            pw.print("our\r\n");
            pw.print("ours\r\n");
            pw.print("ourselves\r\n");
            pw.print("ourself\r\n");
            pw.print("outest\r\n");
            pw.print("outed\r\n");
            pw.print("outwith\r\n");
            pw.print("outs\r\n");
            pw.print("outside\r\n");
            pw.print("over\r\n");
            pw.print("overallest\r\n");
            pw.print("overaller\r\n");
            pw.print("overalls\r\n");
            pw.print("overall\r\n");
            pw.print("overs\r\n");
            pw.print("or\r\n");
            pw.print("orer\r\n");
            pw.print("orest\r\n");
            pw.print("on\r\n");
            pw.print("oneself\r\n");
            pw.print("onest\r\n");
            pw.print("ons\r\n");
            pw.print("onto\r\n");
            pw.print("a\r\n");
            pw.print("atween\r\n");
            pw.print("at\r\n");
            pw.print("athwart\r\n");
            pw.print("atop\r\n");
            pw.print("afore\r\n");
            pw.print("afterward\r\n");
            pw.print("afterwards\r\n");
            pw.print("after\r\n");
            pw.print("afterest\r\n");
            pw.print("afterer\r\n");
            pw.print("ain\r\n");
            pw.print("an\r\n");
            pw.print("any\r\n");
            pw.print("anything\r\n");
            pw.print("anybody\r\n");
            pw.print("anyone\r\n");
            pw.print("anyhow\r\n");
            pw.print("anywhere\r\n");
            pw.print("anent\r\n");
            pw.print("anear\r\n");
            pw.print("and\r\n");
            pw.print("andor\r\n");
            pw.print("another\r\n");
            pw.print("around\r\n");
            pw.print("ares\r\n");
            pw.print("are\r\n");
            pw.print("aest\r\n");
            pw.print("aer\r\n");
            pw.print("against\r\n");
            pw.print("again\r\n");
            pw.print("accordingly\r\n");
            pw.print("abaft\r\n");
            pw.print("abafter\r\n");
            pw.print("abaftest\r\n");
            pw.print("abovest\r\n");
            pw.print("above\r\n");
            pw.print("abover\r\n");
            pw.print("abouter\r\n");
            pw.print("aboutest\r\n");
            pw.print("about\r\n");
            pw.print("aid\r\n");
            pw.print("amidst\r\n");
            pw.print("amid\r\n");
            pw.print("among\r\n");
            pw.print("amongst\r\n");
            pw.print("apartest\r\n");
            pw.print("aparter\r\n");
            pw.print("apart\r\n");
            pw.print("appeared\r\n");
            pw.print("appears\r\n");
            pw.print("appear\r\n");
            pw.print("appearing\r\n");
            pw.print("appropriating\r\n");
            pw.print("appropriate\r\n");
            pw.print("appropriatest\r\n");
            pw.print("appropriates\r\n");
            pw.print("appropriater\r\n");
            pw.print("appropriated\r\n");
            pw.print("already\r\n");
            pw.print("always\r\n");
            pw.print("also\r\n");
            pw.print("along\r\n");
            pw.print("alongside\r\n");
            pw.print("although\r\n");
            pw.print("almost\r\n");
            pw.print("all\r\n");
            pw.print("allest\r\n");
            pw.print("aller\r\n");
            pw.print("allyou\r\n");
            pw.print("alls\r\n");
            pw.print("albeit\r\n");
            pw.print("awfully\r\n");
            pw.print("as\r\n");
            pw.print("aside\r\n");
            pw.print("asides\r\n");
            pw.print("aslant\r\n");
            pw.print("ases\r\n");
            pw.print("astrider\r\n");
            pw.print("astride\r\n");
            pw.print("astridest\r\n");
            pw.print("astraddlest\r\n");
            pw.print("astraddler\r\n");
            pw.print("astraddle\r\n");
            pw.print("availablest\r\n");
            pw.print("availabler\r\n");
            pw.print("available\r\n");
            pw.print("aughts\r\n");
            pw.print("aught\r\n");
            pw.print("vs\r\n");
            pw.print("v\r\n");
            pw.print("variousest\r\n");
            pw.print("variouser\r\n");
            pw.print("various\r\n");
            pw.print("via\r\n");
            pw.print("vis-a-vis\r\n");
            pw.print("vis-a-viser\r\n");
            pw.print("vis-a-visest\r\n");
            pw.print("viz\r\n");
            pw.print("very\r\n");
            pw.print("veriest\r\n");
            pw.print("verier\r\n");
            pw.print("versus\r\n");
            pw.print("k\r\n");
            pw.print("g\r\n");
            pw.print("go\r\n");
            pw.print("gone\r\n");
            pw.print("good\r\n");
            pw.print("got\r\n");
            pw.print("gotta\r\n");
            pw.print("gotten\r\n");
            pw.print("get\r\n");
            pw.print("gets\r\n");
            pw.print("getting\r\n");
            pw.print("b\r\n");
            pw.print("by\r\n");
            pw.print("byandby\r\n");
            pw.print("by-and-by\r\n");
            pw.print("bist\r\n");
            pw.print("both\r\n");
            pw.print("but\r\n");
            pw.print("buts\r\n");
            pw.print("be\r\n");
            pw.print("beyond\r\n");
            pw.print("because\r\n");
            pw.print("became\r\n");
            pw.print("becomes\r\n");
            pw.print("become\r\n");
            pw.print("becoming\r\n");
            pw.print("becomings\r\n");
            pw.print("becominger\r\n");
            pw.print("becomingest\r\n");
            pw.print("behind\r\n");
            pw.print("behinds\r\n");
            pw.print("before\r\n");
            pw.print("beforehand\r\n");
            pw.print("beforehandest\r\n");
            pw.print("beforehander\r\n");
            pw.print("bettered\r\n");
            pw.print("betters\r\n");
            pw.print("better\r\n");
            pw.print("bettering\r\n");
            pw.print("betwixt\r\n");
            pw.print("between\r\n");
            pw.print("beneath\r\n");
            pw.print("been\r\n");
            pw.print("below\r\n");
            pw.print("besides\r\n");
            pw.print("beside\r\n");
            pw.print("m\r\n");
            pw.print("my\r\n");
            pw.print("myself\r\n");
            pw.print("mucher\r\n");
            pw.print("muchest\r\n");
            pw.print("much\r\n");
            pw.print("must\r\n");
            pw.print("musts\r\n");
            pw.print("musths\r\n");
            pw.print("musth\r\n");
            pw.print("main\r\n");
            pw.print("make\r\n");
            pw.print("mayest\r\n");
            pw.print("many\r\n");
            pw.print("mauger\r\n");
            pw.print("maugre\r\n");
            pw.print("me\r\n");
            pw.print("meanwhiles\r\n");
            pw.print("meanwhile\r\n");
            pw.print("mostly\r\n");
            pw.print("most\r\n");
            pw.print("moreover\r\n");
            pw.print("more\r\n");
            pw.print("might\r\n");
            pw.print("mights\r\n");
            pw.print("midst\r\n");
            pw.print("midsts\r\n");
            pw.print("h\r\n");
            pw.print("huh\r\n");
            pw.print("humph\r\n");
            pw.print("he\r\n");
            pw.print("hers\r\n");
            pw.print("herself\r\n");
            pw.print("her\r\n");
            pw.print("hereby\r\n");
            pw.print("herein\r\n");
            pw.print("hereafters\r\n");
            pw.print("hereafter\r\n");
            pw.print("hereupon\r\n");
            pw.print("hence\r\n");
            pw.print("hadst\r\n");
            pw.print("had\r\n");
            pw.print("having\r\n");
            pw.print("haves\r\n");
            pw.print("have\r\n");
            pw.print("has\r\n");
            pw.print("hast\r\n");
            pw.print("hardly\r\n");
            pw.print("hae\r\n");
            pw.print("hath\r\n");
            pw.print("him\r\n");
            pw.print("himself\r\n");
            pw.print("hither\r\n");
            pw.print("hitherest\r\n");
            pw.print("hitherer\r\n");
            pw.print("his\r\n");
            pw.print("how-do-you-do\r\n");
            pw.print("however\r\n");
            pw.print("how\r\n");
            pw.print("howbeit\r\n");
            pw.print("howdoyoudo\r\n");
            pw.print("hoos\r\n");
            pw.print("hoo\r\n");
            pw.print("w\r\n");
            pw.print("woulded\r\n");
            pw.print("woulding\r\n");
            pw.print("would\r\n");
            pw.print("woulds\r\n");
            pw.print("was\r\n");
            pw.print("wast\r\n");
            pw.print("we\r\n");
            pw.print("wert\r\n");
            pw.print("were\r\n");
            pw.print("with\r\n");
            pw.print("withal\r\n");
            pw.print("without\r\n");
            pw.print("within\r\n");
            pw.print("why\r\n");
            pw.print("what\r\n");
            pw.print("whatever\r\n");
            pw.print("whateverer\r\n");
            pw.print("whateverest\r\n");
            pw.print("whatsoeverer\r\n");
            pw.print("whatsoeverest\r\n");
            pw.print("whatsoever\r\n");
            pw.print("whence\r\n");
            pw.print("whencesoever\r\n");
            pw.print("whenever\r\n");
            pw.print("whensoever\r\n");
            pw.print("when\r\n");
            pw.print("whenas\r\n");
            pw.print("whether\r\n");
            pw.print("wheen\r\n");
            pw.print("whereto\r\n");
            pw.print("whereupon\r\n");
            pw.print("wherever\r\n");
            pw.print("whereon\r\n");
            pw.print("whereof\r\n");
            pw.print("where\r\n");
            pw.print("whereby\r\n");
            pw.print("wherewithal\r\n");
            pw.print("wherewith\r\n");
            pw.print("whereinto\r\n");
            pw.print("wherein\r\n");
            pw.print("whereafter\r\n");
            pw.print("whereas\r\n");
            pw.print("wheresoever\r\n");
            pw.print("wherefrom\r\n");
            pw.print("which\r\n");
            pw.print("whichever\r\n");
            pw.print("whichsoever\r\n");
            pw.print("whilst\r\n");
            pw.print("while\r\n");
            pw.print("whiles\r\n");
            pw.print("whithersoever\r\n");
            pw.print("whither\r\n");
            pw.print("whoever\r\n");
            pw.print("whosoever\r\n");
            pw.print("whoso\r\n");
            pw.print("whose\r\n");
            pw.print("whomever\r\n");
            pw.print("s\r\n");
            pw.print("syne\r\n");
            pw.print("syn\r\n");
            pw.print("shalling\r\n");
            pw.print("shall\r\n");
            pw.print("shalled\r\n");
            pw.print("shalls\r\n");
            pw.print("shoulding\r\n");
            pw.print("should\r\n");
            pw.print("shoulded\r\n");
            pw.print("shoulds\r\n");
            pw.print("she\r\n");
            pw.print("sayyid\r\n");
            pw.print("sayid\r\n");
            pw.print("said\r\n");
            pw.print("saider\r\n");
            pw.print("saidest\r\n");
            pw.print("same\r\n");
            pw.print("samest\r\n");
            pw.print("sames\r\n");
            pw.print("samer\r\n");
            pw.print("saved\r\n");
            pw.print("sans\r\n");
            pw.print("sanses\r\n");
            pw.print("sanserifs\r\n");
            pw.print("sanserif\r\n");
            pw.print("so\r\n");
            pw.print("soer\r\n");
            pw.print("soest\r\n");
            pw.print("sobeit\r\n");
            pw.print("someone\r\n");
            pw.print("somebody\r\n");
            pw.print("somehow\r\n");
            pw.print("some\r\n");
            pw.print("somewhere\r\n");
            pw.print("somewhat\r\n");
            pw.print("something\r\n");
            pw.print("sometimest\r\n");
            pw.print("sometimes\r\n");
            pw.print("sometimer\r\n");
            pw.print("sometime\r\n");
            pw.print("several\r\n");
            pw.print("severaler\r\n");
            pw.print("severalest\r\n");
            pw.print("serious\r\n");
            pw.print("seriousest\r\n");
            pw.print("seriouser\r\n");
            pw.print("senza\r\n");
            pw.print("send\r\n");
            pw.print("sent\r\n");
            pw.print("seem\r\n");
            pw.print("seems\r\n");
            pw.print("seemed\r\n");
            pw.print("seemingest\r\n");
            pw.print("seeminger\r\n");
            pw.print("seemings\r\n");
            pw.print("seven\r\n");
            pw.print("summat\r\n");
            pw.print("sups\r\n");
            pw.print("sup\r\n");
            pw.print("supping\r\n");
            pw.print("supped\r\n");
            pw.print("such\r\n");
            pw.print("since\r\n");
            pw.print("sine\r\n");
            pw.print("sines\r\n");
            pw.print("sith\r\n");
            pw.print("six\r\n");
            pw.print("stop\r\n");
            pw.print("stopped\r\n");
            pw.print("p\r\n");
            pw.print("plaintiff\r\n");
            pw.print("plenty\r\n");
            pw.print("plenties\r\n");
            pw.print("please\r\n");
            pw.print("pleased\r\n");
            pw.print("pleases\r\n");
            pw.print("per\r\n");
            pw.print("perhaps\r\n");
            pw.print("particulars\r\n");
            pw.print("particularly\r\n");
            pw.print("particular\r\n");
            pw.print("particularest\r\n");
            pw.print("particularer\r\n");
            pw.print("pro\r\n");
            pw.print("providing\r\n");
            pw.print("provides\r\n");
            pw.print("provided\r\n");
            pw.print("provide\r\n");
            pw.print("probably\r\n");
            pw.print("l\r\n");
            pw.print("layabout\r\n");
            pw.print("layabouts\r\n");
            pw.print("latter\r\n");
            pw.print("latterest\r\n");
            pw.print("latterer\r\n");
            pw.print("latterly\r\n");
            pw.print("latters\r\n");
            pw.print("lots\r\n");
            pw.print("lotting\r\n");
            pw.print("lotted\r\n");
            pw.print("lot\r\n");
            pw.print("lest\r\n");
            pw.print("less\r\n");
            pw.print("ie\r\n");
            pw.print("ifs\r\n");
            pw.print("if\r\n");
            pw.print("i\r\n");
            pw.print("itself\r\n");
            pw.print("its\r\n");
            pw.print("it\r\n");
            pw.print("is\r\n");
            pw.print("idem\r\n");
            pw.print("idemer\r\n");
            pw.print("idemest\r\n");
            pw.print("immediate\r\n");
            pw.print("immediately\r\n");
            pw.print("immediatest\r\n");
            pw.print("immediater\r\n");
            pw.print("inwards\r\n");
            pw.print("inwardest\r\n");
            pw.print("inwarder\r\n");
            pw.print("inward\r\n");
            pw.print("inasmuch\r\n");
            pw.print("into\r\n");
            pw.print("instead\r\n");
            pw.print("insofar\r\n");
            pw.print("indicates\r\n");
            pw.print("indicated\r\n");
            pw.print("indicate\r\n");
            pw.print("indicating\r\n");
            pw.print("indeed\r\n");
            pw.print("inc\r\n");
            pw.print("f\r\n");
            pw.print("fact\r\n");
            pw.print("facts\r\n");
            pw.print("fs\r\n");
            pw.print("figupon\r\n");
            pw.print("figupons\r\n");
            pw.print("figuponing\r\n");
            pw.print("figuponed\r\n");
            pw.print("few\r\n");
            pw.print("fewer\r\n");
            pw.print("fewest\r\n");
            pw.print("frae\r\n");
            pw.print("from\r\n");
            pw.print("failing\r\n");
            pw.print("failings\r\n");
            pw.print("five\r\n");
            pw.print("furthers\r\n");
            pw.print("furtherer\r\n");
            pw.print("furthered\r\n");
            pw.print("furtherest\r\n");
            pw.print("further\r\n");
            pw.print("furthering\r\n");
            pw.print("furthermore\r\n");
            pw.print("fourscore\r\n");
            pw.print("followthrough\r\n");
            pw.print("for\r\n");
            pw.print("forwhy\r\n");
            pw.print("fornenst\r\n");
            pw.print("formerly\r\n");
            pw.print("former\r\n");
            pw.print("formerer\r\n");
            pw.print("formerest\r\n");
            pw.print("formers\r\n");
            pw.print("forbye\r\n");
            pw.print("forby\r\n");
            pw.print("fore\r\n");
            pw.print("forever\r\n");
            pw.print("forer\r\n");
            pw.print("fores\r\n");
            pw.print("four\r\n");
            pw.print("d\r\n");
            pw.print("ddays\r\n");
            pw.print("dday\r\n");
            pw.print("do\r\n");
            pw.print("doing\r\n");
            pw.print("doings\r\n");
            pw.print("doe\r\n");
            pw.print("does\r\n");
            pw.print("doth\r\n");
            pw.print("downwarder\r\n");
            pw.print("downwardest\r\n");
            pw.print("downward\r\n");
            pw.print("downwards\r\n");
            pw.print("downs\r\n");
            pw.print("done\r\n");
            pw.print("doner\r\n");
            pw.print("dones\r\n");
            pw.print("donest\r\n");
            pw.print("dos\r\n");
            pw.print("dost\r\n");
            pw.print("did\r\n");
            pw.print("differentest\r\n");
            pw.print("differenter\r\n");
            pw.print("different\r\n");
            pw.print("describing\r\n");
            pw.print("describe\r\n");
            pw.print("describes\r\n");
            pw.print("described\r\n");
            pw.print("despiting\r\n");
            pw.print("despites\r\n");
            pw.print("despited\r\n");
            pw.print("despite\r\n");
            pw.print("during\r\n");
            pw.print("c\r\n");
            pw.print("cum\r\n");
            pw.print("circa\r\n");
            pw.print("chez\r\n");
            pw.print("cer\r\n");
            pw.print("certain\r\n");
            pw.print("certainest\r\n");
            pw.print("certainer\r\n");
            pw.print("cest\r\n");
            pw.print("canst\r\n");
            pw.print("cannot\r\n");
            pw.print("cant\r\n");
            pw.print("cants\r\n");
            pw.print("canting\r\n");
            pw.print("cantest\r\n");
            pw.print("canted\r\n");
            pw.print("co\r\n");
            pw.print("could\r\n");
            pw.print("couldst\r\n");
            pw.print("comeon\r\n");
            pw.print("comeons\r\n");
            pw.print("come-ons\r\n");
            pw.print("come-on\r\n");
            pw.print("concerning\r\n");
            pw.print("concerninger\r\n");
            pw.print("concerningest\r\n");
            pw.print("consequently\r\n");
            pw.print("considering\r\n");
            pw.print("e\r\n");
            pw.print("eg\r\n");
            pw.print("eight\r\n");
            pw.print("either\r\n");
            pw.print("even\r\n");
            pw.print("evens\r\n");
            pw.print("evenser\r\n");
            pw.print("evensest\r\n");
            pw.print("evened\r\n");
            pw.print("evenest\r\n");
            pw.print("ever\r\n");
            pw.print("everyone\r\n");
            pw.print("everything\r\n");
            pw.print("everybody\r\n");
            pw.print("everywhere\r\n");
            pw.print("every\r\n");
            pw.print("ere\r\n");
            pw.print("each\r\n");
            pw.print("et\r\n");
            pw.print("etc\r\n");
            pw.print("elsewhere\r\n");
            pw.print("else\r\n");
            pw.print("ex\r\n");
            pw.print("excepted\r\n");
            pw.print("excepts\r\n");
            pw.print("except\r\n");
            pw.print("excepting\r\n");
            pw.print("exes\r\n");
            pw.print("enough\r\n");
            pw.print("f\r\n");
            pw.print("0\r\n");
            pw.print("1\r\n");
            pw.print("2\r\n");
            pw.print("3\r\n");
            pw.print("4\r\n");
            pw.print("2009\r\n");
            pw.print("ad\r\n");
            pw.print("add\r\n");
            pw.print("al\r\n");
            pw.print("alla\r\n");
            pw.print("altrimenti\r\n");
            pw.print("amora\r\n");
            pw.print("appartenenti\r\n");
            pw.print("applic\r\n");
            pw.print("author\r\n");
            pw.print("boolean\r\n");
            pw.print("block\r\n");
            pw.print("bean\r\n");
            pw.print("catch\r\n");
            pw.print("ci\r\n");
            pw.print("che\r\n");
            pw.print("con\r\n");
            pw.print("connect\r\n");
            pw.print("copyright\r\n");
            pw.print("cui\r\n");
            pw.print("da\r\n");
            pw.print("dal\r\n");
            pw.print("dall\r\n");
            pw.print("dalla\r\n");
            pw.print("databas\r\n");
            pw.print("dato\r\n");
            pw.print("dbconnect\r\n");
            pw.print("default\r\n");
            pw.print("deg\r\n");
            pw.print("dei\r\n");
            pw.print("delete\r\n");
            pw.print("dell\r\n");
            pw.print("della\r\n");
            pw.print("deve\r\n");
            pw.print("di\r\n");
            pw.print("entity\r\n");
            pw.print("not\r\n");
            pw.print("found\r\n");
            pw.print("error\r\n");
            pw.print("message\r\n");
            pw.print("extend\r\n");
            pw.print("gesa\r\n");
            pw.close();
        }

        pDocumentOne = normalize(pDocumentOne);
        pDocumentTwo = normalize(pDocumentTwo);

        Map<String, Double> featureOne = this.countOccourrences(pDocumentOne);
        Map<String, Double> featureTwo = this.countOccourrences(pDocumentTwo);

        return CosineSimilarity.computeCosineSimilarity(featureOne, featureTwo);

    }

    private Map<String, Double> countOccourrences(String[] pDocument) {
        Map<String, Double> terms = new HashMap<>();
        String[] initialWords = pDocument[1].split(" ");

        for (String word : initialWords) {

            if (!terms.containsKey(word)) {
                terms.put(word, 1.0);
            } else {
                terms.put(word, terms.get(word) + 1.0);
            }
        }
        return terms;
    }

    private String[] normalize(String[] document) throws IOException {
        String stopWordListFile = readFile(this.stopwordList.getAbsolutePath());
        String[] stopWordList = stopWordListFile.split("\n");
        Vector<String> finalWords = new Vector<>();

        document[1] = splitCamelCase(document[1]);
        document[1] = document[1].toLowerCase();

        document[1] = deleteAllSymbols(document[1]);

        String[] newDoc = document[1].split(" ");

        for (String s : newDoc)
            s = s.replaceAll(" ", "");

        newDoc = deleteAllWhiteSpaces(newDoc);

        for (String word : newDoc) {
            if (word.length() > 1)
                finalWords.add(word);
        }

        for (String stopWord : stopWordList) {
            for (String word : newDoc) {
                if (stopWord.equals(word)) {
                    finalWords.remove(word);
                }
            }
        }

        String[] toReturn = new String[2];

        String value = "";
        for (String s : finalWords) {
            value += "" + s + " ";
        }

        toReturn[0] = document[0];
        toReturn[1] = value;

        return toReturn;
    }

    private String splitCamelCase(String s) {
        return s.replaceAll(String.format("%s|%s|%s",
                "(?<=[A-Z])(?=[A-Z][a-z])", "(?<=[^A-Z])(?=[A-Z])",
                "(?<=[A-Za-z])(?=[^A-Za-z])"), " ");
    }

    private String[] deleteAllWhiteSpaces(String[] pArray) {
        Vector<String> newVector = new Vector<String>();

        for (String s : pArray) {
            if (!s.isEmpty())
                newVector.add(s);
        }

        String[] words = new String[newVector.size()];
        for (int k = 0; k < newVector.size(); k++)
            words[k] = newVector.get(k);

        return words;
    }

    private String deleteAllSymbols(String s) {
        s = s.replaceAll("\\(", " ");
        s = s.replaceAll("\\)", " ");
        s = s.replaceAll("\\[", " ");
        s = s.replaceAll("\\]", " ");
        s = s.replaceAll("\\{", " ");
        s = s.replaceAll("\\}", " ");
        s = s.replaceAll("\\=", " ");
        s = s.replaceAll("\\/", " ");
        s = s.replaceAll("\\+", " ");
        s = s.replaceAll("\\-", " ");
        s = s.replaceAll("\\*", " ");
        s = s.replaceAll("\\_", " ");
        s = s.replaceAll("\\%", " ");
        s = s.replaceAll("\\!", " ");
        s = s.replaceAll("\\;", " ");
        s = s.replaceAll("\\,", " ");
        s = s.replaceAll("\\.", " ");
        s = s.replaceAll("\"", " ");
        s = s.replaceAll("\\:", " ");
        s = s.replaceAll("\\<", " ");
        s = s.replaceAll("\\>", " ");
        s = s.replaceAll("\\'", " ");
        s = s.replaceAll("\\n", " ");
        s = s.replaceAll("\\t", " ");
        return s;
    }

    private static Double computeCosineSimilarity(Map<String, Double> firstFeatures, Map<String, Double> secondFeatures) {
        Double similarity = 0.0;
        Double sum = 0.0;          // the numerator of the cosine similarity
        Double fnorm = 0.0;        // the first part of the denominator of the cosine similarity
        Double snorm = 0.0;        // the second part of the denominator of the cosine similarity
        Set<String> fkeys = firstFeatures.keySet();
        Iterator<String> fit = fkeys.iterator();
        while (fit.hasNext()) {
            String featurename = fit.next();
            boolean containKey = secondFeatures.containsKey(featurename);
            if (containKey) {
                sum = sum + firstFeatures.get(featurename) * secondFeatures.get(featurename);
            }
        }
        fnorm = calculateNorm(firstFeatures);
        snorm = calculateNorm(secondFeatures);
        similarity = sum / (fnorm * snorm);

        return similarity;
    }

    private static Double calculateNorm(Map<String, Double> feature) {
        Double norm = 0.0;
        Set<String> keys = feature.keySet();
        Iterator<String> it = keys.iterator();
        while (it.hasNext()) {
            String featurename = it.next();
            norm = norm + Math.pow(feature.get(featurename), 2);
        }
        return Math.sqrt(norm);
    }

    public static String readFile(String nomeFile) throws IOException {
        InputStream is = null;
        InputStreamReader isr = null;

        StringBuffer sb = new StringBuffer();
        char[] buf = new char[1024];
        int len;

        try {
            is = new FileInputStream(nomeFile);
            isr = new InputStreamReader(is);

            while ((len = isr.read(buf)) > 0)
                sb.append(buf, 0, len);

            return sb.toString();
        } finally {
            if (isr != null)
                isr.close();
        }
    }

}
